/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ClientsActivite;

import ProtocoleFUCAMP.RequeteFUCAMP;
import ProtocoleFUCAMP.ReponseFUCAMP;
import Utilities.Utils;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Salva
 */
public class ListeActivities extends javax.swing.JFrame {

    /**
     * Creates new form ListeActivities
     */
    
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock;
     File currentDirectory = new File(System.getProperty("user.dir"));
    
    public String path = currentDirectory+"\\src\\Config\\Config.config";
    
    
    public ListeActivities( ) throws IOException {
        initComponents();
        //Connexion();
        initActivities();
        
        
        jTable1.addMouseListener(new MouseAdapter() {
         public void mouseClicked(MouseEvent me) {
            if (me.getClickCount() == 2) {     // to detect doble click events
               JTable target = (JTable)me.getSource();
               int row = target.getSelectedRow(); // select a row
                try {
                    InscriptionActivite ia = new InscriptionActivite(null, true , (String) jTable1.getValueAt(row, 0),(String) jTable1.getValueAt(row, 1),(String) jTable1.getValueAt(row, 2),(String) jTable1.getValueAt(row, 3) );
                    ia.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ListeActivities.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ListeActivities.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(ListeActivities.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
         }
      });
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Liste des activités : ");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom", "Type", "duree"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(173, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListeActivities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListeActivities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListeActivities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListeActivities.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ListeActivities().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ListeActivities.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void initActivities() throws IOException{
        
        
        RequeteFUCAMP req = null;
        try {
            req = new RequeteFUCAMP(RequeteFUCAMP.GETALLACTIVITIES);
            
            ois=null; oos=null; cliSock = null;
            String adresse = Utils.getItemConfig(path, "adresse");
            int port = Integer.parseInt(Utils.getItemConfig(path, "PORT_ACTIVITES"));
            try
            {
                cliSock = new Socket(adresse, port);
                System.out.println(cliSock.getInetAddress().toString());
            }                       
            catch (IOException ex) {
                Logger.getLogger(LoginActivite.class.getName()).log(Level.SEVERE, null, ex);
            }
            // Envoie de la requête
            System.out.println("envoie requete GetALLActivities !");
            try
            {
                oos = new ObjectOutputStream(cliSock.getOutputStream());
                oos.writeObject(req); oos.flush();
            }
            catch (IOException e)
            { System.err.println("Erreur réseau ? [" + e.getMessage() + "]"); }
            
            // Lecture de la réponse
            ReponseFUCAMP rep = null;
            System.out.println("en attente d'une réponse !");
            try
            {
                ois = new ObjectInputStream(cliSock.getInputStream());
                rep = (ReponseFUCAMP)ois.readObject();
                System.out.println(" *** Reponse reçue : " + rep.getChargeUtile());
            }
            catch (ClassNotFoundException e)
            { System.out.println("--- erreur sur la classe = " + e.getMessage()); }
            catch (IOException e)
            { System.out.println("--- erreur IO = " + e.getMessage()); }
            
            
            
            String []tmp = rep.getChargeUtile().split(";");
            
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            for(int i =0; i<tmp.length; i++){
                String []champs = tmp[i].split(":");
                model.addRow(new Object[]{champs[0], champs[1], champs[2], champs[3]});
            }
            


        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LoginActivite.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(LoginActivite.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    //????
    public void Connexion() throws IOException{
        ois=null; oos=null; cliSock = null;
        String adresse = Utils.getItemConfig(path, "adresse");
        int port = Integer.parseInt(Utils.getItemConfig(path, "PORT_ACTIVITES"));
        try
        {
            cliSock = new Socket(adresse, port);
            System.out.println(cliSock.getInetAddress().toString());
        }                       
        catch (IOException ex) {
            Logger.getLogger(LoginActivite.class.getName()).log(Level.SEVERE, null, ex);
        }
        oos = new ObjectOutputStream(cliSock.getOutputStream());
        
        ois = new ObjectInputStream(cliSock.getInputStream());
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
