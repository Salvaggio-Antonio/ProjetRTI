package Client_Reservation;

import Custom.Cell.TableActionCellEditor;
import Custom.Cell.TableActionCellRender;
import Custom.Cell.TableActionEvent;
import ProtocoleROMP.ReponseROMP;
import ProtocoleROMP.RequeteROMP;
import Utilities.Configuration;
import Utilities.RequeteUtils;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Salva
 */
public class SupprimerReservation extends javax.swing.JDialog {

    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock;
    public String id;
    public int duree;
    Configuration config;

    /**
     * Creates new form PaimentReservation
     */
    public SupprimerReservation(java.awt.Frame parent, boolean modal, Configuration c) {
        super(parent, modal);
        initComponents();
        config = c;
        try {
            fillTableAction_reservation();
        } catch (SQLException ex) {
            Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
        }

        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onDelete(int row) {
                if (table.isEditing()) {
                    table.getCellEditor().stopCellEditing();

                }
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                if(checkReservation((String) model.getValueAt(row, 3)))
                {
                    if( deleteReservation((String) model.getValueAt(row, 0)))
                    {
                        model.removeRow(row);  
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null,"Une erreur est survenue", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"La date a été dépassé", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        };
        table.getColumnModel().getColumn(4).setCellRenderer(new TableActionCellRender());
        table.getColumnModel().getColumn(4).setCellEditor(new TableActionCellEditor(event));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser = new com.raven.datechooser.DateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        dateChooser.setDateFormat("dd-MMMM-yyyy");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° Réservation ", "Nom", "N° Chambre", "Date", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(50);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.raven.datechooser.DateChooser dateChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void fillTableAction_reservation() throws SQLException {
        RequeteROMP req = null;
        try {
            req = new RequeteROMP(RequeteROMP.LROOMS);

            ois = null;
            oos = null;
            cliSock = null;
            try {
                cliSock = new Socket(config.getAdresse(), config.getPort());
                System.out.println(cliSock.getInetAddress().toString());
            } catch (IOException ex) {
                Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
            }
            oos = new ObjectOutputStream(cliSock.getOutputStream());

            // Envoie de la requête
            RequeteUtils.SendRequest(req, "LROOMS", oos, cliSock);
            
            ois = new ObjectInputStream(cliSock.getInputStream());
            // Lecture de la réponse
            ReponseROMP rep;
            rep = (ReponseROMP) RequeteUtils.ReceiveRequest(cliSock, ois, "ROMP");

            String[] tmp = rep.getChargeUtile().split(":");

            DefaultTableModel model = (DefaultTableModel) table.getModel();

            for (int i = 0; i < tmp.length; i++) {
                String[] champs = tmp[i].split(" ");
                model.addRow(new Object[]{champs[0], champs[1], champs[2], champs[3]});
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static boolean checkReservation(String dateString) {
        // Format de la date attendu (yyyy-MM-dd)
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        try {
            Date currentDate = new Date(); // Date actuelle
            
            // Convertir la chaîne de date en objet Date
            Date reservationDate = dateFormat.parse(dateString);
            
            // Comparer avec la date actuelle
            if (reservationDate.before(currentDate)) {
                return false; // La date est dépassée
            } else {
                return true; // La date est future ou aujourd'hui
            }
        } catch (ParseException e) {
            // Gérer une exception si la conversion de la chaîne en date échoue
            e.printStackTrace();
            return false; // En cas d'erreur, considérer la réservation comme dépassée
        }
    }

    public boolean deleteReservation(String reservation) {
        RequeteROMP req = null;

        try {
            req = new RequeteROMP(RequeteROMP.CROOM,reservation);
            ois = null;
            oos = null;
            cliSock = null;
            try {
                cliSock = new Socket(config.getAdresse(), config.getPort());
                System.out.println(cliSock.getInetAddress().toString());
            } catch (IOException ex) {
                Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
            }
            oos = new ObjectOutputStream(cliSock.getOutputStream());
            ois = new ObjectInputStream(cliSock.getInputStream());
            // Envoie de la requête
            RequeteUtils.SendRequest(req, "LROOMS", oos, cliSock);

            // Lecture de la réponse
            ReponseROMP rep;
            rep = (ReponseROMP) RequeteUtils.ReceiveRequest(cliSock, ois, "ROMP");
            if(rep.getCode() == ReponseROMP.OK)
            {
                return true;
            }
            else{
                return false;
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(SupprimerReservation.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;

    }
}
