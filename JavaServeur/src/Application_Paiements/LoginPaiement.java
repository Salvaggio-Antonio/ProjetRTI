/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Application_Paiements;

import org.apache.commons.lang3.RandomStringUtils;
import ProtocoleSPAYMAP.ReponseSPAYMAP;
import ProtocoleSPAYMAP.RequeteSPAYMAP;
import Utilities.Configuration;
import Utilities.CryptoUtils;
import Utilities.RequeteUtils;
import Utilities.KeysUser;
import Utilities.User;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SignatureException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.spec.InvalidKeySpecException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.RandomStringUtils;

/**
 *
 * @author Salva
 */
public class LoginPaiement extends javax.swing.JFrame {

    /**
     * Creates new form LoginPaiement
     */
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
    private Socket cliSock;
    private PrivateKey pk;
    private PublicKey pubk;
    File currentDirectory = new File(System.getProperty("user.dir"));
    public Configuration config;
    public String path = currentDirectory + "\\src\\Config\\Config.config";

    public PublicKey pubkServeur;

    public LoginPaiement() throws IOException {
        initComponents();
        config = new Configuration(path, "PORT_PAY");
        ois = null;
        oos = null;
        cliSock = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Jnom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPass = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nom d'utilisateur");

        Jnom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JnomActionPerformed(evt);
            }
        });

        jLabel2.setText("Mot de passe");

        jButton1.setText("Se connecter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPass, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Jnom, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jButton1)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Jnom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JnomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JnomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JnomActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //vérifier si les champs sont remplis
        ois = null;
        oos = null;
        cliSock = null;
        if (!Jnom.getText().isEmpty() && jPass.getPassword().length > 0) {
            String user = Jnom.getText();
            long temps = (new Date()).getTime();
            double alea = Math.random();
            RequeteSPAYMAP req;
            char[] passwordChars = jPass.getPassword(); // Récupère les caractères du champ de mot de passe
            String password = new String(passwordChars);
            try {
                byte[] messageDigest = CryptoUtils.getInstance().createMessageDigest(Jnom.getText(), password, temps, alea);
                String env = Jnom.getText() + ":" + temps + ":" + alea + ":" + Base64.getEncoder().encodeToString(messageDigest);
                req = new RequeteSPAYMAP(RequeteSPAYMAP.LPAY, env);

                cliSock = new Socket(config.getAdresse(), config.getPort());
                oos = new ObjectOutputStream(cliSock.getOutputStream());
                //---------------- LOGIN--------------------------//
                RequeteUtils.SendRequest(req, "LPAY", oos, cliSock);

                ois = new ObjectInputStream(cliSock.getInputStream());
                ReponseSPAYMAP rep = (ReponseSPAYMAP) RequeteUtils.ReceiveRequest(cliSock, ois, "SPAYMAP");
                cliSock.close();
                oos.close();
                ois.close();
                if (rep.getCode() == ReponseSPAYMAP.LOGIN_OK) {
                    // ---------------- HANDSHAKE chiffrement asymétrique----------------//
                    String pathClient = currentDirectory + "\\..\\KeyStore\\Client\\client_keystore.jce";
                    pk = CryptoUtils.getInstance().getPrivateKey(pathClient, "JCEKS", "TOUNFLOUTCH", "client_key", "client_key");
                    pubk = CryptoUtils.getInstance().getPublicKey(pathClient, "DER", "TOUNFLOUTCH", "client_key");

                    //signature
                    String message = RandomStringUtils.randomAlphabetic(8);
                    byte[] signature = CryptoUtils.getInstance().createSignature(pk, message.getBytes());

                    env = CryptoUtils.getInstance().PublicKeyToBase64(pubk) + ":" + Base64.getEncoder().encodeToString(signature) + ":" + message + ":" + Jnom.getText();
                    req = new RequeteSPAYMAP(RequeteSPAYMAP.LSHAREPUBLICKEY, env);
                    cliSock = new Socket(config.getAdresse(), config.getPort());
                    oos = new ObjectOutputStream(cliSock.getOutputStream());
                    RequeteUtils.SendRequest(req, "LSHAREPUBLICKEY", oos, cliSock);

                    ois = new ObjectInputStream(cliSock.getInputStream());
                    rep = (ReponseSPAYMAP) RequeteUtils.ReceiveRequest(cliSock, ois, "SPAYMAP");
                    
                    if (rep.getCode() == ReponseSPAYMAP.OK) {
                        
                        //vérifier la signature du serveur 
                        String[] tmp = rep.getChargeUtile().split(":");

                        pubkServeur = CryptoUtils.getInstance().Base64ToPublicKey(tmp[0]);

                        byte[] signatureServeur = Base64.getDecoder().decode(tmp[1]);

                        byte[] messageserveur = tmp[2].getBytes();

                        boolean ok = CryptoUtils.getInstance().checkSignature(pubkServeur, signatureServeur, messageserveur);

                        if (ok) {
                            cliSock.close();
                            oos.close();
                            ois.close();
                            //génération 2 clé de session (symétrique)
                            KeysUser key = new KeysUser(CryptoUtils.getInstance().generateSecretKey(), CryptoUtils.getInstance().generateSecretKey(), pubkServeur);
                            User.getInstance().setUser(Jnom.getText(), key);   
                            //partage de la clé symétriqueAuth
                            cliSock = new Socket(config.getAdresse(), config.getPort());
                            byte[] m = User.getInstance().getMykeys().getSecretAuth().getEncoded();
                            byte[] keysymmetric = CryptoUtils.getInstance().getChiffrement(pubkServeur, m);
                            signature = CryptoUtils.getInstance().createSignature(pk, m);
                            env = Base64.getEncoder().encodeToString(keysymmetric) +":"+ Base64.getEncoder().encodeToString(signature) +":"+ user;
                            req = new RequeteSPAYMAP(RequeteSPAYMAP.LSHARESECRETKEYAUTH, env);
                            oos = new ObjectOutputStream(cliSock.getOutputStream());
                            RequeteUtils.SendRequest(req, "LSHARESECRETKEYAUTH", oos, cliSock);

                            ois = new ObjectInputStream(cliSock.getInputStream());
                            rep = (ReponseSPAYMAP) RequeteUtils.ReceiveRequest(cliSock, ois, "SPAYMAP");
                            
                            if (rep.getCode() == ReponseSPAYMAP.OK) {
                                cliSock.close();
                                oos.close();
                                ois.close();
                                //partage de la clé symétriqueCrypt
                                cliSock = new Socket(config.getAdresse(), config.getPort());
                                m = User.getInstance().getMykeys().getSecretCrypt().getEncoded();
                                keysymmetric = CryptoUtils.getInstance().getChiffrement(pubkServeur, m);
                                signature = CryptoUtils.getInstance().createSignature(pk, m);
                                env = Base64.getEncoder().encodeToString(keysymmetric) +":"+ Base64.getEncoder().encodeToString(signature) +":"+ user;
                                req = new RequeteSPAYMAP(RequeteSPAYMAP.LSHARESECRETKEYCRYPT, env);
                                oos = new ObjectOutputStream(cliSock.getOutputStream());
                                RequeteUtils.SendRequest(req, "LSHARESECRETKEYCRYPT", oos, cliSock);
                                ois = new ObjectInputStream(cliSock.getInputStream());
                                rep = (ReponseSPAYMAP) RequeteUtils.ReceiveRequest(cliSock, ois, "SPAYMAP");
                                cliSock.close();
                                oos.close();
                                ois.close();
                                if (rep.getCode() == ReponseSPAYMAP.OK) {
                                    JOptionPane.showMessageDialog(null, "Login ok !", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                                    dispose();
                                    PaiementReservation pr = new PaiementReservation(config);
                                    pr.setVisible(true);
                                }
                                else{
                                    JOptionPane.showMessageDialog(null, "Erreur partage de clé symétrique 2 !", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                                }
                            }
                            else {
                                JOptionPane.showMessageDialog(null, "Erreur partage de clé symétrique 1 !", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Erreur partage de clé asymétrique", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "Le nom de l'utilisateur ou mot de passe incorrect ", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
                }
                

            } catch (NoSuchAlgorithmException | NoSuchProviderException | IOException | ClassNotFoundException | SQLException | KeyStoreException | CertificateException | UnrecoverableKeyException | InvalidKeySpecException | InvalidKeyException | SignatureException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException ex) {
                Logger.getLogger(LoginPaiement.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Veuillez saisir le nom d'utilisateur et le mot de passe !", "CAUTION ! ", JOptionPane.INFORMATION_MESSAGE);
        }
        //utiliser une fonction qui crée un digest salé du mdp
        //envoyer dans le réseau


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPassActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPaiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPaiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPaiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPaiement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new LoginPaiement().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(LoginPaiement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Jnom;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField jPass;
    // End of variables declaration//GEN-END:variables
}
